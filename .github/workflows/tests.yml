# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# Based on ~/code/xcookie/xcookie/rc/tests.yml.in
# Now based on ~/code/xcookie/xcookie/builders/github_actions.py
# See: https://github.com/Erotemic/xcookie

name: BinPyCI

on:
  push:
  pull_request:
    branches: [ devel, main ]

jobs:
  lint_job:
    ##
    # Run quick linting and typing checks.
    # To disable all linting add "linter=false" to the xcookie config.
    # To disable type checks add "notypes" to the xcookie tags.
    ##
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Set up Python 3.11 for linting
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        python -m pip install flake8
    - name: Lint with flake8
      run: |-
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./src/python/pyxccd --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Typecheck with mypy
      run: |-
        python -m pip install mypy
        mypy --install-types --non-interactive ./src/python/pyxccd
        mypy ./src/python/pyxccd
  build_and_test_sdist:
    ##
    # Build the binary package from source and test it in the same
    # environment.
    ##
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Upgrade pip and install dependencies
      run: |-
        python -m pip install --upgrade pip
        python -m pip install --prefer-binary -r requirements/tests.txt
        python -m pip install --prefer-binary -r requirements/runtime.txt
        python -m pip install --prefer-binary -r requirements/headless.txt
      # python -m pip install --prefer-binary -r requirements/gdal.txt
    - name: Build sdist
      shell: bash
      run: |-
        python -m pip install pip -U
        python -m pip install setuptools>=0.8 wheel build
        python -m build --sdist --outdir wheelhouse
    - name: Install sdist
      run: |-
        ls -al ./wheelhouse
        pip install --prefer-binary wheelhouse/pyxccd*.tar.gz -v
    - name: Test minimal loose sdist
      run: |-
        pwd
        ls -al
        # Run in a sandboxed directory
        WORKSPACE_DNAME="testsrcdir_minimal_${CI_PYTHON_VERSION}_${GITHUB_RUN_ID}_${RUNNER_OS}"
        mkdir -p $WORKSPACE_DNAME
        cd $WORKSPACE_DNAME
        # Run the tests
        # Get path to installed package
        MOD_DPATH=$(python -c "import pyxccd, os; print(os.path.dirname(pyxccd.__file__))")
        echo "MOD_DPATH = $MOD_DPATH"
        python -m pytest --verbose --cov={self.mod_name} $MOD_DPATH ../tests
        cd ..
    - name: Test full loose sdist
      run: |-
        pwd
        ls -al
        python -m pip install --prefer-binary -r requirements/headless.txt
        # Run in a sandboxed directory
        WORKSPACE_DNAME="testsrcdir_full_${CI_PYTHON_VERSION}_${GITHUB_RUN_ID}_${RUNNER_OS}"
        mkdir -p $WORKSPACE_DNAME
        cd $WORKSPACE_DNAME
        # Run the tests
        # Get path to installed package
        MOD_DPATH=$(python -c "import pyxccd, os; print(os.path.dirname(pyxccd.__file__))")
        echo "MOD_DPATH = $MOD_DPATH"
        python -m pytest --verbose --cov={self.mod_name} $MOD_DPATH ../tests
        cd ..
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: ./wheelhouse/*.tar.gz
  
  build_and_test_linux_wheels:
    if: github.event_name == 'push'
    uses: ./.github/workflows/linux_wheels.yml
  
  build_and_test_windows_wheels:
    if: github.event_name == 'push'
    uses: ./.github/workflows/win_wheels.yml
# job to upload the package to PyPI
  upload-to-pypi:
    needs: 
      - build_and_test_sdist
      - build_and_test_linux_wheels
      - build_and_test_windows_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/tags') || startsWith(github.event.ref, 'refs/heads/release'))
    environment:
      name: pypi
      url: https://pypi.org/p/pyxccd
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheels
        path: wheelhouse
    - name: Show files to upload
      shell: bash
      run: ls -la wheelhouse
    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
